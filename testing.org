#+TITLE: Testing Functions for CLFM

* Display Current Directory
  Wish List:
  - We want to be able to mark items by
    - Clicking
    - Clicking and dragging to mark all items between pointer button press and release
    - Clicking and then Shift-Clicking to mark all items between the first item and the one Shift-Clicked
    - Marking the currently selected item (via C-SPC or M-SPC)
    - Marking multiple items by marking the currently selected item, navigating to another item, and marking it with M-SPC

** Ideas for Implementation
   We can have our display functions contained within a let, forming a closure, wherein a variable called ~current-directory-contents~ is bound. we can define another function within this let to update this variable whenever we change directory. When displaying the current directory, we should loop through this list instead of gathering the contents every time. This would be more efficcient when navigating the selected item than collecting the contents on every function call. 
   #+BEGIN_SRC common-lisp
     (let ((current-directory-contents
	     (append (sort (uiop:subdirectories (uiop:getcwd)) #'path<)
		     (sort (uiop:directory-files (uiop:getcwd)) #'path<))))
       (defun display-current-directory (frame pane) ...))
   #+END_SRC
   However this introduces a problem - we want to have the selection be movable... perhaps we could have multiple variables, ~pre-selection-contents~, ~selected-item~, and ~post-selection-contents~. When we read a C-n or C-p keyboard event, we move the selection. If its C-n, we put ~selected-item~ at the head of ~pre-selection-contents~, and pop the first item of ~post-selected-contents~ and store it in ~selected-item~. if its C-p we do that in reverse. 
   Of course, when displaying, we will have to reverse ~pre-selection-contents~.
   #+BEGIN_SRC common-lisp
     (let (pre-selection-contents
	   (selected-item
	     (car (append (sort (uiop:subdirectories (uiop:getcwd)) #'path<)
			  (sort (uiop:directory-files (uiop:getcwd)) #'path<))))
	   (post-selection-contents
	     (cdr (append (sort (uiop:subdirectories (uiop:getcwd)) #'path<)
			  (sort (uiop:directory-files (uiop:getcwd)) #'path<)))))
       (defun move-selection-up ()
	 (when pre-selection-contents
	   (setf post-selection-contents (cons selected-item post-selection-contents))
	   (setf selected-item (pop pre-selection-contents))))
       (defun move-selection-down ()
	 (when post-selection-contents
	   (setf pre-selection-contents (cons selected-item pre-selection-contents))
	   (setf selected-item (pop post-selection-contents))))
       (defun display-current-directory (frame pane) ...))
   #+END_SRC
